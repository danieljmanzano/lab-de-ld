// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2024 17:53:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cpu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cpu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLKFPGA;
reg clock;
reg clock_sim;
reg masterClear;
reg resetDeb;
// wires                                               
wire A0;
wire A1;
wire A2;
wire A3;
wire A4;
wire A5;
wire B0;
wire B1;
wire B2;
wire B3;
wire B4;
wire B5;
wire C0;
wire C1;
wire C2;
wire C3;
wire C4;
wire C5;
wire [7:0] COUNT;
wire D0;
wire D1;
wire D2;
wire D3;
wire D4;
wire D5;
wire E0;
wire E1;
wire E2;
wire E3;
wire E4;
wire E5;
wire F0;
wire F1;
wire F2;
wire F3;
wire F4;
wire F5;
wire G0;
wire G1;
wire G2;
wire G3;
wire G4;
wire G5;
wire [3:0] R1_;
wire [3:0] R2_;
wire [15:0] ROM_;

// assign statements (if any)                          
cpu i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.CLKFPGA(CLKFPGA),
	.clock(clock),
	.clock_sim(clock_sim),
	.COUNT(COUNT),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.E0(E0),
	.E1(E1),
	.E2(E2),
	.E3(E3),
	.E4(E4),
	.E5(E5),
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.F4(F4),
	.F5(F5),
	.G0(G0),
	.G1(G1),
	.G2(G2),
	.G3(G3),
	.G4(G4),
	.G5(G5),
	.masterClear(masterClear),
	.R1_(R1_),
	.R2_(R2_),
	.resetDeb(resetDeb),
	.ROM_(ROM_)
);
initial 
begin 
#50000000 $finish;
end 

// clock_sim
always
begin
	clock_sim = 1'b0;
	clock_sim = #500000 1'b1;
	#500000;
end 

// resetDeb
initial
begin
	resetDeb = 1'b0;
end 

// masterClear
initial
begin
	masterClear = 1'b1;
	masterClear = #1000000 1'b0;
end 
endmodule

